#!/usr/bin/env python
# STDLIB
import glob
import os
import argparse

# LOCAL
from ifscube import manga
# from ifscube import gmos
from ifscube import parser


def lock(fname):
    with open(fname + '.lock', 'w') as f:
        f.write('This one is taken, go to the next.\n')
    return


def dofit(fname, linefit_args, overwrite):

    galname = fname.split('/')[-1]

    try:
        suffix = linefit_args['suffix']
    except KeyError:
        suffix = None

    try:
        outname = linefit_args['outimage']
    except KeyError:
        outname = None

    if outname is None:
        if suffix is None:
            suffix = '_linefit'
        outname = galname.replace('.fits', suffix + '.fits')

    lockname = outname + '.lock'
    if os.path.isfile(lockname):
        return
    else:
        lock(outname)

    if overwrite:
        if os.path.isfile(outname):
            os.remove(outname)
    else:
        if os.path.isfile(outname):
            return

    a = manga.cube(fname)

    try:
        a.linefit(**linefit_args)
    except IOError:
        if os.path.isfile(lockname):
            os.remove(lockname)
        return

    if os.path.isfile(lockname):
        os.remove(lockname)

    return


if __name__ == '__main__':

    ap = argparse.ArgumentParser()
    ap.add_argument('datacube', help='Data cube to be fit.')
    ap.add_argument('-c', '--config', type=str, help='Config file.')
    ap.add_argument(
        '--overwrite', action='store_true',
        help='Overwrites previous fit with the same name.')

    args = ap.parse_args()

    l = glob.glob(args.datacube)
    l.sort()

    c = parser.LineFitParser(args.config)
    linefit_args = c.get_vars()

    for i in l:
        dofit(i, linefit_args, overwrite=args.overwrite)
