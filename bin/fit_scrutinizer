#!/usr/bin/python
# stdlib
import argparse
import tkinter as tk

# third party
import matplotlib
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk
from matplotlib.figure import Figure
import numpy as np
from numpy import ma
from mpl_toolkits.axes_grid1 import make_axes_locatable

# local
import ifscube


class mclass:

    def __init__(self, window, args):

        self.fitstatus_mask = args.fitstatus_mask

        cube = ifscube.Cube()
        cube.loadfit(args.fitfile)

        self.window = window
        self.buttonPlot = tk.Button(
            window, text='Image plot', command=self.plot)
        self.buttonFollow = tk.Button(
            window, text='Follow mouse', command=self.follow)
        self.buttonSinglePlot = tk.Button(
            window, text='Plot on click', command=self.singleplot)

        self.text = tk.Text(
            window, bg='white', height=10, width=80, font=('Fixedsys', 12))

        l_par = tk.Listbox(window, selectmode='single', exportselection=0)
        l_component = tk.Listbox(
            window, selectmode='single', exportselection=0)

        n_components, n_parameters = [
            int(cube.fit_info[i]) for i in ['components', 'parameters']]

        if hasattr(cube, 'parnames'):
            for i in cube.parnames:
                l_par.insert('end', i)
        else:
            for i in ['Flux', 'Velocity', 'Sigma', 'h3', 'h4'][0:n_parameters]:
                l_par.insert('end', i)

        if hasattr(cube, 'eqw_model'):
            l_par.insert('end', 'eqw_model')
        if hasattr(cube, 'eqw_direct'):
            l_par.insert('end', 'eqw_direct')

        self.n_components = n_components
        self.n_parameters = n_parameters

        if hasattr(cube, 'component_names'):
            for i in cube.component_names:
                l_component.insert('end', i)
        else:
            for i in range(n_components):
                l_component.insert('end', i)

        if args.small_screen:
            self.fig = Figure(figsize=(3, 3))
            self.fitplot = Figure(figsize=(6, 3))
        else:
            self.fig = Figure(figsize=(6, 6))
            self.fitplot = Figure(figsize=(12, 6))
        self.ax1 = self.fig.add_subplot(111)
        self.ax2 = self.fitplot.add_subplot(111)

        div = make_axes_locatable(self.ax1)
        self.cax = div.append_axes('right', size='5%', pad=0)
        self.cax.set_xticks([])
        self.cax.set_yticks([])

        canvas = FigureCanvasTkAgg(self.fig, master=self.window)
        canvas2 = FigureCanvasTkAgg(self.fitplot, master=self.window)

        canvas.get_tk_widget()\
            .grid(row=0, column=0, rowspan=6, columnspan=6)
        canvas2.get_tk_widget()\
            .grid(row=0, column=7, rowspan=6, columnspan=12)

        tb_frame = tk.Frame(window)
        tb_frame.grid(row=7, column=0, columnspan=6, sticky='W')
        toolbar = NavigationToolbar2Tk(canvas, tb_frame)
        toolbar.update()

        other_tb_frame = tk.Frame(window)
        other_tb_frame.grid(row=7, column=7, columnspan=12, sticky='W')
        other_toolbar = NavigationToolbar2Tk(canvas2, other_tb_frame)
        other_toolbar.update()

        self.buttonPlot.grid(row=8, column=0, sticky='W')
        self.buttonFollow.grid(row=9, column=0, sticky='W')
        self.buttonSinglePlot.grid(row=10, column=0, sticky='W')
        l_par.grid(row=8, column=1, rowspan=4)
        l_component.grid(row=8, column=2, rowspan=4)
        self.text.grid(row=8, column=7, rowspan=4)

        self.l_par = l_par
        self.l_component = l_component

        canvas.draw()

        self.canvas = canvas
        self.canvas2 = canvas2

        self.cube = cube

    def singleplot(self):

        try:
            self.canvas.mpl_disconnect(self.connect_id)
        except:
            pass

        self.connect_id = self.canvas.mpl_connect(
            'button_press_event', self.onclick)

    def follow(self):

        try:
            self.canvas.mpl_disconnect(self.connect_id)
        except:
            pass

        self.connect_id = self.canvas.mpl_connect(
            'motion_notify_event', self.onclick)

    def getim(self):

        cm = 'viridis'
        # ncomps = self.n_components
        npars = self.n_parameters

        par = self.l_par.curselection()[0]
        comp = self.l_component.curselection()[0]
        par_name = self.l_par.get(par)
        # comp_name = self.l_component.get(comp)

        if 'eqw' not in par_name:
            k = comp * npars + par

            d = ma.masked_invalid(self.cube.em_model[k])

            if self.fitstatus_mask:
                d.mask |= self.cube.fit_status != 0

            if par == 0:
                d *= 1e+17

            # elif par == 1:
            #     mwl = ma.median(d)
            #     d = (d - mwl) / d * 2.998e+5
            #     cm = 'Spectral_r'

            # elif par == 2:
            #     wl = ma.masked_invalid(self.cube.em_model[k - 1])
            #     d = d / wl * 2.998e+5
            elif par > 0:
                cm = 'Spectral_r'

        else:
            if par_name == 'eqw_model':
                data = self.cube.eqw_model[comp]
            elif par_name == 'eqw_direct':
                data = self.cube.eqw_direct[comp]

            d = -ma.masked_invalid(data)

        return d, cm

    def plot(self, contrast=1):

        a = self.ax1
        a.cla()
        self.cax.cla()

        d, cm = self.getim()

        z0 = np.percentile(d[~d.mask], contrast)
        z1 = np.percentile(d[~d.mask], 100 - contrast)

        if cm == 'Spectral_r':
            im = a.pcolormesh(d, cmap=cm, vmin=z0, vmax=z1)
        else:
            im = a.pcolormesh(d, cmap=cm)

        matplotlib.colorbar.Colorbar(self.cax, im)

        a.set_aspect('equal', 'datalim')

        self.canvas.draw()

    def onclick(self, event):

        # print(event.key)

        try:
            i, j = [int(np.floor(x) + 0.5) for x in (event.xdata, event.ydata)]
            if np.any(np.array([i, j]) < 0):
                self.text.delete('1.0', 'end')
                self.text.insert('insert', 'Index Error!')
                return
        except AttributeError:
            self.text.delete('1.0', 'end')
            self.text.insert('insert', 'You clicked outside the plot!')
            return

        self.text.delete('1.0', 'end')

        a = self.ax2
        a.cla()

        self.text.insert('insert', ('({:6d}, {:6d})\n').format(i, j))

        try:
            s = self.cube.plotfit(i, j, axis=a, output='return')
            self.text.insert('insert', s)
        except IndexError:
            self.text.insert('insert', 'Index Error!')

        self.canvas2.draw()


class onedfit:

    def __init__(self, fname):

        spec = ifscube.onedspec.Spectrum()
        spec.loadfit(fname)

        spec.plotfit()

        return


if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.add_argument('fitfile', type=str, help='Result of the fit')
    parser.add_argument('-m', '--fitstatus_mask', help='Apply fit status mask.', action='store_true')
    parser.add_argument(
        '-s', '--single-spectrum', action='store_true', help='Use this option for one-dimensional spectra.')
    parser.add_argument('--small-screen', action='store_true', help='Makes a small window for small screens.')

    args = parser.parse_args()

    if args.single_spectrum:
        s = onedfit(args.fitfile) 
    else:
        window = tk.Tk()
        window.title('IFSCUBE Fit Scrutinizer')
        start = mclass(window, args)
        window.mainloop()
