#!/usr/bin/env python
# STDLIB
import os
import argparse
import ctypes

# LOCAL
from ifscube import onedspec
from ifscube import parser


def mklock(fname):
    with open(fname + '.lock', 'w') as f:
        f.write('This one is taken, go to the next.\n')
    return


def dofit(fname, linefit_args, overwrite, cubetype, loading,
          plot=False, lock=False):

    galname = fname.split('/')[-1]

    try:
        suffix = linefit_args['suffix']
    except KeyError:
        suffix = None

    try:
        outname = linefit_args['outimage']
    except KeyError:
        outname = None

    if outname is None:
        if suffix is None:
            suffix = '_linefit'
        outname = galname.replace('.fits', suffix + '.fits')

    if not overwrite:
        if os.path.isfile(outname):
            print('ERROR! File {:s} already exists.'.format(outname))
            return

    if lock:
        lockname = outname + '.lock'
        if os.path.isfile(lockname):
            print('ERROR! Lock file {:s} is present.'.format(lockname))
            return
        else:
            mklock(outname)

    if overwrite:
        if os.path.isfile(outname):
            os.remove(outname)
    else:
        if os.path.isfile(outname):
            if lock:
                if os.path.isfile(lockname):
                    os.remove(lockname)
            return

    a = onedspec.Spectrum(fname, **loading)

    linefit_args['outimage'] = outname
    try:
        a.linefit(**linefit_args)
    except IOError:
        if lock:
            if os.path.isfile(lockname):
                os.remove(lockname)
        return

    if plot:
        a.plotfit()

    if lock:
        if os.path.isfile(lockname):
            os.remove(lockname)

    return


if __name__ == '__main__':

    ap = argparse.ArgumentParser()
    ap.add_argument(
        '-o', '--overwrite', action='store_true',
        help='Overwrites previous fit with the same name.')
    ap.add_argument(
        '-p', '--plot', action='store_true',
        help='Plots the resulting fit.')
    ap.add_argument(
        '-l', '--lock', action='store_true', default=False,
        help='Ignore the presence of the lock file.')
    ap.add_argument(
        '-b', '--cubetype', type=str, default='None',
        help='Chooses a specific loading module. Currently available options'
        'are:\n intmanga: manga integrade spectrum.')
    ap.add_argument(
        '-t', '--mklthreads', type=int, default=1,
        help='Number of threads for numpy routines.')
    ap.add_argument('-c', '--config', type=str, help='Config file.')
    ap.add_argument('datacube', help='Data cube to be fit.', nargs='*')

    args = ap.parse_args()

    c = parser.LineFitParser(args.config)

    mkl_rt = ctypes.CDLL('libmkl_rt.so')
    mkl_rt.mkl_set_num_threads(
        ctypes.byref(
            ctypes.c_int(args.mklthreads)))

    for i in args.datacube:
        linefit_args = c.get_vars()
        dofit(
            i, linefit_args, overwrite=args.overwrite, cubetype=args.cubetype,
            plot=args.plot, loading=c.loading_opts, lock=args.lock)
